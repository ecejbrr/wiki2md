#!/usr/bin/env node

/* jshint latedef: false */

var util = require('util');
var fs = require('fs');
var path = require('path');
var wiki2md = require('../index');

var commands = require('commander');

var packageConfig = fs.readFileSync(path.join(path.dirname(fs.realpathSync(process.argv[1])), '../package.json'));
var buildVersion = JSON.parse(packageConfig).version;

var isWindows = process.platform == 'win32';

// Specify commander options to parse command line params correctly
commands
    .version(buildVersion, '-v, --version')
    .usage('[options] <source-file>')
    .option('-o, --output [output-file]', 'Use [output-file] as output instead of STDOUT')

commands.on('--help', function() {
    util.puts('  Examples:\n');
    util.puts('    %> wiki2md one.html');
    util.puts('    %> wiki2md -o one-min.html one.html');
    if (isWindows) {
        util.puts('    %> type one.html two.html three.html | wiki2md -o merged-and-minified.html');
    } else {
        util.puts('    %> cat one.html two.html three.html | wiki2md -o merged-and-minified.html');
        util.puts('    %> cat one.html two.html three.html | wiki2md | gzip -9 -c > merged-minified-and-gzipped.html.gz');
    }
    util.puts('');
    process.exit();
});

commands.parse(process.argv);

var options = {
    source: null,
    target: null
};

var fromStdin = !process.env.__DIRECT__ && !process.stdin.isTTY;

if (!fromStdin && commands.args.length === 0) {
    commands.outputHelp();
    return 0;
}

if (commands.args.length > 0) {
    var source = commands.args[0];
    options.source = source;
}

if (options.source) {
    fs.readFile(options.source, 'utf8', function(error, data) {
        if (error)
            throw error;
        minify(data);
    });
} else {
    var stdin = process.openStdin();
    stdin.setEncoding('utf-8');
    var data = '';
    stdin.on('data', function(chunk) {
        data += chunk;
    });
    stdin.on('end', function() {
        minify(data);
    });
}

function minify(data) {
    var minified = wiki2md(data)
    output(minified);
}

function output(minified) {
    if (options.target)
        fs.writeFileSync(options.target, minified, 'utf8');
    else
        process.stdout.write(minified);
}
